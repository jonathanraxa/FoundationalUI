/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* changing ONE global font-size will allow us to change all the other 
    * measurements at a particular media query  */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* this will be inherited where ever 
    else it's declared */
  box-sizing: inherit; }

html {
  /* 1rem = 10px 
        * making font-size to px is bad practice. so we need to 
        * make it to font-size:100%; and make it 10px by %
        * divide what we want, by 16px
        * so, 10/16 = .625 * 10, or 62.5%
    */
  font-size: 62.5%; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* 3rem / 10px = 3rem */
  padding: 3rem;
  box-sizing: border-box; }

.header {
  position: relative;
  /* 95% of the viewport height */
  height: 95vh;
  /* to right bottom | to right */
  background-image: linear-gradient(to right bottom, rgba(40, 180, 133, 0.8), rgba(85, 197, 122, 0.8)), url("../img/hero.jpg");
  /* element is the size of the browser */
  background-size: cover;
  /* keeps the background image at the top --> top | bottom | center */
  background-position: top;
  /* specific a polygon that will clip the image 
        - start with the corners at top left
    */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    /* top: 40px; left: 4rem; */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* width will be figured out by the browser */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* TOP & LEFT are in relation to the parent element */
    top: 40%;
    left: 50%;
    /* you want to TRANSLATE the box, we want it relational to the element itself */
    transform: translate(-50%, -50%);
    text-align: center; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* keeps the entire heading-primary element from shaking
        - no one really knows why this happens
     */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* how fast the animation will start and stop at certain points
            ease | ease-in | ease-out */
    animation-timing-function: ease-out;
    /* how many times the animation will execute */
    /* animation-iteration-count: 3; */
    /* waits a certain amount of time before executing */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight 1s ease-out; }

/* creating an animation */
@keyframes moveInLeft {
  /* intial state */
  0% {
    opacity: 0;
    /* animate in the X direction */
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* final state */
  100% {
    opacity: 1;
    /* translate(0) to make it look the exact way it looks now */
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* pseudo classes - a specific state of a link (ie. visited, link, hover)*/
.btn {
  /* psuedo element - acts like a child of the button 
        - hides behind the button
        - 'after' is still an element on its own 
    */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* all properties are animated */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    /* we want it to move UP, so it's a negative value */
    transform: translateY(-0.3rem);
    /* position of shadow | how far we want the shadow to go down | blur | color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* after psuedo element on hover */ }
    .btn:hover::after {
      /* scale() increases the element */
      transform: scaleX(1.4) scaleY(1.6);
      /* goes out to opacity 0 after .4s  */
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* automatically sets the initial animation styles before execution */
    animation-fill-mode: backwards; }
